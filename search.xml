<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[文件描述符]]></title>
    <url>%2F2020%2F03%2F29%2Ffile_descriptor%2F</url>
    <content type="text"><![CDATA[概念wiki解释)，文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。 一个文件描述符是一个数字，唯一标识一个在计算机的操作系统打开的文件。它描述了数据资源，以及如何访问该资源。 当程序要求打开文件（或其他数据资源，例如网络套接字）时，内核： 授予访问权限。 在全局文件表中创建一个条目。 向软件提供该条目的位置。 该描述符是唯一的非负整数。系统上每个打开的文件至少存在一个文件描述符。 细节对于内核，所有打开的文件均由文件描述符引用。文件描述符是一个非负数。当我们打开现有文件或创建新文件时，内核将文件描述符返回到进程。当我们想读取或写入文件时，我们用文件描述符标识文件。 每个Linux进程（也许是守护程序除外）都应该具有三个标准的POSIX文件描述符： POSIX常数名称 文件描述符 描述 STDIN_FILENO 0 标准输入 STDOUT_FILENO 1 标准输出 STDERR_FILENO 2 标准误差 有三个“系统文件表”：有一个文件描述符表，它将文件描述符（小整数）映射到打开的文件表中的条目。打开文件表中的每个条目（除其他事项外）还包含文件偏移量和指向内存中inode表的指针。在打开的文件表中，每个open（）调用都有一个文件表条目，如果文件描述符是dup（）ed或fork（）ed，则共享该条目。 我们使用来自维基百科的示例来显示这些表的工作方式。这是一张照片： 单个进程的文件描述符，文件表和索引节点表。请注意，多个文件描述符可以引用相同的文件表条目（例如，由于dup系统调用），并且多个文件表条目可以依次引用同一个索引节点（如果已多次打开；则该表之所以仍然简化，是因为它通过文件名来表示索引节点，即使索引节点可以具有多个名称也是如此。文件描述符3没有引用文件表中的任何内容，表明它已关闭。 理解具体情况，需要了解由内核维护的 3 个数据结构： 进程级 文件描述符表 ( file descriptor table ) 系统级 打开文件表 ( open file table ) 文件系统 i-node表 ( i-node table ) 这 3 个数据结构之间的关系如 图-1 所示： 图-1：文件描述符、打开文件及 inode 关系 文件描述符表内核为每个进程维护一个 文件描述符表 ，该表每一条目都记录了单个文件描述符的相关信息，包括： 控制标志 ( flags )，目前内核仅定义了一个，即 close-on-exec 打开文件描述体指针 打开文件表内核对所有打开的文件维护一个系统级别的 打开文件描述表 ( open file description table )，简称 打开文件表 。 表中条目称为 打开文件描述体 ( open file description )，存储了与一个打开文件相关的全部信息，包括： 文件偏移量 ( file offset )，调用 read() 和 write() 更新，调用 lseek() 直接修改 访问模式 ，由 open() 调用设置，例如：只读、只写或读写等 i-node 对象指针 i-node 表每个文件系统会为存储于其上的所有文件(包括目录)维护一个 i-node 表，单个 i-node 包含以下信息： 文件类型 ( file type )，可以是常规文件、目录、套接字或 FIFO 访问权限 文件锁列表 ( file locks ) 文件大小 等等 i-node 存储在磁盘设备上，内核在内存中维护了一个副本，这里的 i-node 表为后者。 副本除了原有信息，还包括： 引用计数 (从打开文件描述体)、所在 设备号 以及一些临时属性，例如文件锁。 参数优化1. 系统最大的文件描述符数量系统文件最大值取决于内存大小，在kernel初始化时定义 代码: 123456789101112131415/* * One file with associated inode and dcache is very roughly 1K. Per default * do not use more than 10% of our memory for files. */void __init files_maxfiles_init(void)&#123; unsigned long n; unsigned long nr_pages = totalram_pages(); unsigned long memreserve = (nr_pages - nr_free_pages()) * 3/2; memreserve = min(memreserve, nr_pages - 1); n = ((nr_pages - memreserve) * (PAGE_SIZE / 1024)) / 10; files_stat.max_files = max_t(unsigned long, n, NR_FILE);&#125; 由代码可知，file-max的值不超过内存的10% 1234567891011121314151617181920212223242526272829#获取total ram pages 和 PAGE_SIZE大小$ getconf -a | grep "PAGE"PAGESIZE 4096PAGE_SIZE 4096_AVPHYS_PAGES 565489_PHYS_PAGES 1011579#查看系统最大打开文件描述符数$ cat /proc/sys/fs/file-max399894#查看当前系统使用的打开文件描述符数$ cat /proc/sys/fs/file-nr928 0 399894 | | |_ Max no. of file descriptors allowed on the system | | | |__ Total free allocated file descriptors | |__ Total allocated file descriptors #设置系统最大文件描述符#临时性$ echo 1000000 &gt; /proc/sys/fs/file-max#永久性 #在/etc/sysctl.conf中设置fs.file-max = 1000000$ sysctl -p 2. 进程最大描述符123456789101112131415161718192021222324# 查看某个进程的使用$ ls -l /proc/2374/fd | wc -l# 进程最大打开文件描述符数#soft limit$ ulimit -n65535#hard limit$ ulimit -Hn65535#soft limit不能大于hard limit#设置#临时性$ ulimit -Sn 1600000#永久性$ vim /etc/security/limits.confroot soft nofile 65535root hard nofile 65535#设置nofile的hard limit还有一点要注意的就是hard limit不能大于/proc/sys/fs/nr_open 3. 总结12345671. 所有进程打开的文件描述符数不能超过/proc/sys/fs/file-max2. 单个进程打开的文件描述符数不能超过user limit中nofile的soft limit3. nofile的soft limit不能超过其hard limit4. nofile的hard limit不能超过/proc/sys/fs/nr_open]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello,2019！]]></title>
    <url>%2F2019%2F01%2F28%2F2019%2F</url>
    <content type="text"><![CDATA[Hello, 2019]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谈谈HTTP]]></title>
    <url>%2F2016%2F05%2F29%2Fhttp%2F</url>
    <content type="text"><![CDATA[写在前面如今网络已经无处不在，人们通过网络获取浏览各种信息，其中，大部分都是通过浏览器访问各种网页来获取我们想要的信息，那么浏览器与网页(服务端)究竟是如何通信的呢？这就得从HTTP协议说起了，浏览器获取网页信息都是基于HTTP协议来处理的。 概念HTTP（HyperText Transfer Protocol，超文本传输协议）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。其具有如下特点： 支持客户/服务器模式。 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快 PS：尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。 工作流程HTTP协议的通信过程永远是客户端发起请求(request)，服务器回送响应(respone)，如下图所示： 一个完整的HTTP操作称为一个事务，其流程可分为四步： 建立连接(TCP三次握手) 客户端发送一个请求报文给服务器 服务器响应对应信息 客户端接收信息，然后断开连接 请求和响应详解请求报文 请求行：由请求方法、URL和HTTP版本组成 eg：GET /index.html HTTP/1.1 请求方法 GET：请求获取URI所标识的资源 HEAD：请求获取URI所标识的资源，但不传回资源的文本部分 POST：向指定URI资源提交数据，请求服务器进行处理 PUT：向指定URI资源上传其最新内容 DELETE：请求服务器删除URI所标识的资源 TRACE：回显服务器收到的请求，主要用于测试或诊断 OPTIONS：请求URI资源所支持的HTTP请求方法 CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接 URL 请求的资源路径 协议版本 现在大部分为HTTP/1.0 和 HTTP/1.1 请求头部 eg：host:www.google.com host为必选，其他都为可选参数 空行 消息体 请求所带的文本 响应报文 状态行：由协议版本、状态码和描述信息组成 eg：HTTP/1.1 200 OK 协议版本 状态码：用于告诉客户端，服务器是否产生预期的响应 1XX：提示信息，表示请求已被成功接收，继续处理 2XX：成功，表示请求已被成功接收，理解 3XX：重定向，要完成请求必须进行更进一步的处理 4XX：客户端错误，请求有语法错误或请求无法实现 5XX：服务器端错误，服务器未能实现合法的请求 描述信息 响应头部 空行 消息体 一个例子访问codecc.xyz首页 Request，首行为请求行，其余为请求头部 Respone，首行为响应状态行，空行前为响应头部，其余为响应数据 参考https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谈谈DNS]]></title>
    <url>%2F2016%2F05%2F21%2Fdns%2F</url>
    <content type="text"><![CDATA[写在前面目前，我们大部分的网络通信都是基于TCP/IP协议的，而TCP/IP又基于IP地址作为唯一标识进行通信，随着需要记忆的IP地址数量的增多，肯定会超出我们的记忆能力范围，但如果使用一种利于人们的记忆的方式，如域名，例如”www.google.com&quot;，我们便可以轻松的记忆这种方式的标识，而不是繁杂的数字。而DNS(域名系统)就是为了可以使用这种方式提供服务的。 概念DNS(Domain Name System)，域名系统，它是因特网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。 DNS Domain Namespace，DNS域命名空间，是一种分层树状结构，其格式如下:”www.google.com&quot;,以点&quot;.&quot;为分隔。结构如图所示： 根域：绝对域名(FQDN)，以点”.”结尾的域名 顶级域：用来指示某个国家/地区或组织使用的名称的类型名称，例如.com 二级域：个人或组织在因特网上使用的注册名称，例如google.com 子域：已注册的二级域名派生的域名，一般就是网站名，例如www.google.com 主机名：标识网络上的特定计算机，例如h1.www.google.com DNS资源记录：(即映射关系，通常由域名管理员进行配置)，常见类型如下： SOA：起始授权机构 NS：名称服务器 MX：邮件服务器 A：IP地址(最常用，映射IP地址) CNAME：别名(较常用，映射到其他域名) DNS工作原理当我们请求一个域名时，会通过DNS服务器将域名解析成IP访问最终的主机，那么，DNS是如何查询到域名所对应的IP并返回给我们的呢？请工作机制如图所示： 当我们请求一个域名时，直到获取到IP地址，整个过程是如何工作的？以请求www.codecc.xyz为例： 首先，我们的主机会去查找本地的hosts文件和本地DNS解析器缓存，如果hosts文件和本地DNS缓存存在www.codecc.xyz和IP的映射关系，则完成域名解析，请求该IP地址，否则进入第二步。 当hosts和本地DNS解析器缓存都没有对应的网址映射关系，则会根据机器(/etc/reslove.conf)配置的本地DNS服务器进行查询，此服务器收到查询时，如果要查询的域名在本地配置区域资源或者缓存中存在映射关系，则跳到步骤9，将解析结果直接返回给客户机。 PS：一二步骤为递归查询，其余步骤为迭代查询 若本地DNS服务器不存在该域名的映射关系，就把请求发送至13台根DNS服务器。 根DNS服务器会判断这个域名(.xyz)由谁来授权管理，并返回一个负责该顶级域的DNS服务器的一个IP给本地DNS服务器。 本地DNS服务器收到该IP后，会再将查询请求发送至(.xyz)所在的DNS服务器。 如果(.xyz)的DNS服务器无法解析该域名，就会去判断这个二级域名(codecc.xyz)的管理者，返回一个负责该二级域的DNS服务器的IP给本地DNS服务器。 本地DNS服务器收到该IP后，会再次将查询请求发送至(codecc.xyz)所在的DNS服务器。 (codecc.xyz)的DNS服务器会存有www.codecc.xzy的映射关系，将解析后的IP返回给本地DNS服务器 本地DNS服务器根据查询到的解析IP发送给客户机，至此，DNS解析完成。 常用DNS查询命令 windows： nslookup 域名 Linux： nslookup 域名 dig 域名 参考https://en.wikipedia.org/wiki/Domain_Name_System https://technet.microsoft.com/en-us/library/cc772774(v=ws.10).aspx.aspx) 《TCP/IP详解卷1：协议》]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解系统启动过程]]></title>
    <url>%2F2016%2F05%2F21%2Fsystemstart%2F</url>
    <content type="text"><![CDATA[前言Linux是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为Linux操作系统。Linux是自由软件和开放源代码软件发展中最著名的例子。 接触Linux的时间也不算短了，一直都是直接使用Linux操作系统进行一些工作，很少去了解系统从开机到能使用的整个过程，感觉有需要好好理解下整个系统的启动过程，故写这篇博客加深一下理解。 启动过程先通过一张图来简单了解下整个系统启动的流程，整个过程基本可以分为POST–&gt;BIOS–&gt;MBR(GRUB)–&gt;Kernel–&gt;Init–&gt;Runlevel。下面会详细说明每个过程的作用。 BIOS BIOS(Basic Input/Output System)，基本输入输出系统，该系统存储于主板的ROM芯片上，计算机在开机时，会最先读取该系统，然后会有一个加电自检过程，这个过程其实就是检查CPU和内存，计算机最基本的组成单元(控制器、运算器和存储器)，还会检查其他硬件，若没有异常就开始加载BIOS程序到内存当中。详细的BIOS功能，这边就不说了，BIOS主要的一个功能就是存储了磁盘的启动顺序，BIOS会按照启动顺序去查找第一个磁盘头的MBR信息，并加载和执行MBR中的Bootloader程序，若第一个磁盘不存在MBR，则会继续查找第二个磁盘(PS：启动顺序可以在BIOS的界面中进行设置)，一旦BootLoader程序被检测并加载内存中，BIOS就将控制权交接给了BootLoader程序。 MBR MBR(Master Boot Record)，主引导记录，MBR存储于磁盘的头部，大小为512bytes，其中，446bytes用于存储BootLoader程序，64bytes用于存储分区表信息，最后2bytes用于MBR的有效性检查。 GRUB GRUB(Grand Unified Bootloader)，多系统启动程序，其执行过程可分为三个步骤： Stage1：这个其实就是MBR，它的主要工作就是查找并加载第二段Bootloader程序(stage2)，但系统在没启动时，MBR根本找不到文件系统，也就找不到stage2所存放的位置，因此，就有了stage1_5 Stage1_5：该步骤就是为了识别文件系统 Stage2：GRUB程序会根据/boot/grub/grub.conf文件查找Kernel的信息，然后开始加载Kernel程序，当Kernel程序被检测并在加载到内存中，GRUB就将控制权交接给了Kernel程序。 PS：实际上这个步骤/boot还没被挂载，GRUB直接识别grub所在磁盘的文件系统，所以实际上应该是/grub/grub.conf文件，该配置文件的信息如下： grub.conf: 1234567891011121314151617#boot=/dev/sdadefault=0 #设定默认启动的title的编号，从0开始timeout=5 #等待用户选择的超时时间splashimage=(hd0,0)/boot/grub/splash.xpm.gz #GRUB的背景图片hiddenmenu #隐藏菜单title CentOS (2.6.18-194.el5PAE) #内核标题 root (hd0,0) #内核文件所在的设备 kernel /vmlinuz-2.6.18-194.el5PAE ro root=LABEL=/ #内核文件路径以及传递给内核的参数 initrd /initrd-2.6.18-194.el5PAE.img #ramdisk文件路径 Kernel Kernel，内核，Kernel是Linux系统最主要的程序，实际上，Kernel的文件很小，只保留了最基本的模块，并以压缩的文件形式存储在硬盘中，当GRUB将Kernel读进内存，内存开始解压缩内核文件。讲内核启动，应该先讲下initrd这个文件， initrd(Initial RAM Disk)，它在stage2这个步骤就被拷贝到了内存中，这个文件是在安装系统时产生的，是一个临时的根文件系统(rootfs)。因为Kernel为了精简，只保留了最基本的模块，因此，Kernel上并没有各种硬件的驱动程序，也就无法识rootfs所在的设备，故产生了initrd这个文件，该文件装载了必要的驱动模块，当Kernel启动时，可以从initrd文件中装载驱动模块，直到挂载真正的rootfs，然后将initrd从内存中移除。 Kernel会以只读方式挂载根文件系统，当根文件系统被挂载后，开始装载第一个进程(用户空间的进程)，执行/sbin/init，之后就将控制权交接给了init程序。 Init init，初始化，顾名思义，该程序就是进行OS初始化操作，实际上是根据/etc/inittab(定义了系统默认运行级别)设定的动作进行脚本的执行，第一个被执行的脚本为/etc/rc.d/rc.sysinit，这个是真正的OS初始化脚本，简单讲下这个脚本的任务(可以去看看实际脚本，看看都做了什么)： 激活udev和selinux; 根据/etc/sysctl.conf文件，来设定内核参数; 设定系统时钟; 装载硬盘映射; 启用交换分区; 设置主机名; 根文件系统检测，并以读写方式重新挂载根文件系统; 激活RAID和LVM设备; 启用磁盘配额; 根据/etc/fstab，检查并挂载其他文件系统; 清理过期的锁和PID文件 执行完后，根据配置的启动级别，执行对应目录底下的脚本，最后执行/etc/rc.d/rc.local这个脚本，至此，系统启动完成。 Runlevel runlevel，运行级别，不同的级别会启动的服务不一样，init会根据定义的级别去执行相应目录下的脚本，Linux的启动级别分为以下几种： 0：关机模式 1：单一用户模式(直接以管理员身份进入) 2：多用户模式（无网络） 3：多用户模式（命令行） 4：保留 5：多用户模式（图形界面） 6：重启 在不同的运行级别下，/etc/rc.d/rc这个脚本会分别执行不同目录下的脚本： Runlevel 0 – /etc/rc.d/rc0.d/ Runlevel 1 – /etc/rc.d/rc1.d/ Runlevel 2 – /etc/rc.d/rc2.d/ Runlevel 3 – /etc/rc.d/rc3.d/ Runlevel 4 – /etc/rc.d/rc4.d/ Runlevel 5 – /etc/rc.d/rc5.d/ Runlevel 6 – /etc/rc.d/rc6.d/ 这些目录下的脚本只有K*和S*开头的文件，K开头的文件为开机需要执行关闭的服务，S开头的文件为开机需要执行开启的服务。 参考http://www.thegeekstuff.com/2011/02/linux-boot-process/ http://www.ibm.com/developerworks/library/l-linuxboot/]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WEB安全之CSP]]></title>
    <url>%2F2016%2F05%2F20%2Fwebcsp%2F</url>
    <content type="text"><![CDATA[概念内容安全策略(Content-Security-Policy，CSP)：是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS攻击和数据注入等，这些攻击可实现数据窃取、网站破坏和作为恶意软件分发版本等行为。该策略可让网站管理员指定客户端允许加载的各类可信任资源。 浏览器支持 统计来源：caniuse.com/contentsecuritypolicy &amp; Mozilla 指令参考Content-Security-Policy 响应头的值可配置一个或多个，多个指令以分号;隔开。 指令 示例 描述 default-src ‘self’ cdn.example.com 默认配置，若其他指令没有配置，都以此配置的规则为准 script-src ‘self’ js.example.com 定义允许加载的JavaScript来源 style-src ‘self’ css.example.com 定义允许加载的样式表来源 img-src ‘self’ img.example.com 定义允许加载的图片来源 connect-src ‘self’ 适用于XMLHttpRequest(AJAX),WebSocket或EventSource，当为不允许的来源，浏览器返回一个400的状态码。 font-src font.example.com 定义允许加载的字体来源 object-src ‘self’ 定义允许加载的插件来源.eg,&lt;object>,&lt;embed>或&lt;applet> media-src media.example.com 定义允许加载的audio和video.eg,HTML5,&lt;audio>,&lt;video>元素 frame-src ‘self’ 定义允许加载的框架来源 sandbox allow-forms allow-scripts 授权一个沙箱用来请求具有iframe sanbox等类似属性的资源,该沙箱默认为同源策略,禁止弹出窗口,执行插件和脚本.若要允许其他,可增加配置:allow-forms,allow-same-origin,allow-scripts,allow-top-navigation report-uri /some-report-uri 该配置让浏览器发送一个失败报告到指定的路径，也可以增加-Report-only到HTTP头,让浏览器只发送报告(不做阻止动作) 来源配置参考所有的指令都要在配置后面添加来源列表，多个来源列表可用空格隔开，*和none只能存在一个。 指令 示例 描述 * img-src * 无限制，允许所有 ‘none’ object-src ‘none’ 禁止加载任何路径的资源 ‘self’ script-src ‘self’ 允许加载同源的资源 data: img-src ‘self’ data: 允许通过数据模式加载资源 domain.ccc.com img-src img.ccc.com 允许加载匹配域名的资源 *.ccc.com img-src *.ccc.com 允许加载匹配域名的资源 https://img.ccc.com img-src https://img.ccc.com 允许加载匹配https方式的域名资源 https: img-src https: 允许加载所有匹配https方式的资源 ‘unsafe-inline’ script-src ‘unsafe-inline’ 允许使用内联元素,类似,Style attribute,onclick,scripttag bodies ‘unsafe-eval’ script-src ‘unsafe-eval’ 允许不安全的动态编码，例如eval() 例子 只允许加载同源的所有资源 default-src &#39;self&#39;; 支持*号匹配 default-src &#39;self&#39; https://*.ccc.com:*; 只允许加载同源的脚本 script-src &#39;self&#39;; 只允许加载同源的和www.ccc.com的脚本 script-src &#39;self&#39; www.ccc.com; 常见配置 该策略允许加载同源的图片、脚本、AJAX和CSS资源，并阻止加载其他任何资源，对于大多数网站是一个不错的配置。 default-src &#39;none&#39;; script-src &#39;self&#39;; connect-src &#39;self&#39;; img-src &#39;self&#39;; style-src &#39;self&#39;; 被禁止时的报错信息： 谷歌浏览器可通过谷歌开发工具查看该报错，通常是按F12 Refused to load the script ‘script-uri’ because it violates the following Content Security Policy directive: “your CSP directive”. Firefox 可通过 Web Developer Tools 查看报错 Content Security Policy: A violation occurred for a report-only CSP policy (“An attempt to execute inline scripts has been blocked”). The behavior was allowed, and a CSP report was sent. 参考http://content-security-policy.com/ https://developer.mozilla.org/en-US/docs/Web/Security/CSP http://www.w3.org/TR/CSP2/]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解SSL/TLS协议]]></title>
    <url>%2F2016%2F05%2F19%2Ftls%2F</url>
    <content type="text"><![CDATA[背景早期我们在访问web时使用HTTP协议，该协议在传输数据时使用明文传输，明文传输带来了以下风险： 信息窃听风险，第三方可以获取通信内容 信息篡改风险，第三方可以篡改通信内容 身份冒充风险，第三方可以冒充他人身份参与通信 为了解决明文传输所带来的风险，网景公司在1994年设计了SSL用于Web的安全传输协议，这是SSL的起源。IETF将SSL进行标准化，1999年公布了第一版TLS标准文件。随后又公布了 RFC 5246（2008年8月）与 RFC 6176 （2011年3月）。该协议在web中被广泛应用。 SSL/TLS协议TLS（Transport Layer Security，传输层安全协议），及其前身SSL（Secure Sockets Layer，安全套接层）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障。 TLS协议使用以下三种机制为信息通信提供安全传输： 隐秘性，所有通信都通过加密后进行传播 身份认证，通过证书进行认证 可靠性，通过校验数据完整性维护一个可靠的安全连接 工作机制TLS协议由两部分组成，包括（TLS Record Layer,TLS handshake protocol） Record Layer： 为每条信息提供一个header和在尾部生成一个从Message Authentication Code (MAC) 得到的hash值，其中header由5 bytes组成，分别是协议说明(1bytes),协议版本(2bytes)和长度(2bytes)，跟在header后面的协议信息长度不得超过16384bytes。 Handshake Protocol： 开始一个安全连接需要客户端和服务端经过反复的建立握手。一个TLS握手需要经过如下几个步骤： 首先还是要经过TCP三次握手建立连接，然后才是TLS握手的开始： ClientHello：Client端将自己的TLS协议版本，加密套件，压缩方法，随机数，SessionID(未填充)发送给Server端 ServerHello：Server端将选择后的SSL协议版本，压缩算法，密码套件，填充SessionID，生成的随机数等信息发送给Client端 ServerCertificates：Server端将自己的数字证书(包含公钥)，发送给Client端。(证书需要从数字证书认证机构(CA)申请，证书是对于服务端的一种认证)，若要进行更为安全的数据通信，Server端还可以向Client端发送Cerficate Request来要去客户端发送对方的证书进行合法性的认证。 ServerHelloDone：当完成ServerHello后，Server端会发送Server Hello Done的消息给客户端，表示ServerHello 结束了。 ClientKeyExchage：当Client端收到Server端的证书等信息后，会先对服务端的证书进行检查，检查证书的完整性以及证书跟服务端域名是否吻合，然后使用加密算法生成一个PreMaster Secret，并通过Server端的公钥进行加密，然后发送给Server端。 ClientFinishd：Client端会发送一个ChangeCipherSpec(一种协议，数据只有一字节)，用于告知Server端已经切换到之前协商好的加密套件的状态，准备使用之前协商好的加密套件加密数据并进行传输了。然后使用Master Secret(通过两个随机数、PreMaster Secret和加密算法计算得出)加密一段Finish的数据传送给服务端，此数据是为了在正式传输应用数据之前对刚刚握手建立起来的加解密通道进行验证。 Server Finishd：Sever端在接收到Client端传过来的加密数据后，使用私钥对这段加密数据进行解密，并对数据进行验证，然后会给客户端发送一个ChangeCipherSpec，告知客户端已经切换到协商过的加密套件状态，准备使用加密套件加密数据并传输了。之后，服务端也会使用Master Secret加密一段Finish消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。 根据之前的握手信息，如果客户端和服务端都能对Finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功。 接下来，双方所有的通信数据都通过Master Secret进行加密后传输。 参考：https://en.wikipedia.org/wiki/Transport_Layer_Security https://www.sans.org/reading-room/whitepapers/protocols/ssl-tls-beginners-guide-1029 https://support.microsoft.com/en-us/kb/257591]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单理解计算机通信]]></title>
    <url>%2F2016%2F05%2F18%2Fnetworkcomm%2F</url>
    <content type="text"><![CDATA[写在前面：在计算机刚出现的时候，只能在本机进行一些运算处理，想将一台计算机中的数据转移到另一台计算机中，需要通过外部存储介质来传输，例如磁带、软盘。而网络技术的出现，使得计算机间可以通过一些传输介质(网线、光纤等)，实现快速的数据传输和信息交互。如今，网络已无处不在，那么，计算机之间究竟是如何通信的呢？下面会通过一些基础的网络知识来简单理解计算机之间的通信过程。 网络通信模型：网络通信模型是一种概念模型和框架，旨在使各种计算机在世界范围内互连为网络。其中有OSI七层模型和TCP/IP四层模型，现在大部分网络通信都是以TCP/IP四层模型为基础的。它们的对应层次如下图： OSI有七层：从上到下依次为应用层、表示层、会话层、传输层、网络层、数据链路层、物理层 TCP/IP有四层：从上到下依次为应用层、传输层、互连层(网络层)、网络接口层(链路层)。 因为目前大部分TCP/IP模型，所以就以TCP/IP为例，我们来理解下数据间的通信，下图是两台计算机通信的数据的传输过程： 数据封装：在详细了解TCP/IP每一层各自的作用前，先要理解数据封装的概念，数据在通过网络接口传送出去前，会经过层层封装，每层都会在前面的基础上添加自己的信息，在传输到对方计算机后，又会被层层进行解封装后得到最后的数据。其过程如下图所示： TCP/IP参考模型：TCP/IP参考模型是一个抽象的分层模型，这个模型中，所有的TCP/IP系列网络协议都被归类到4个抽象的”层”中。每一抽象层创建在低一层提供的服务上，并且为高一层提供服务。 完成一些特定的任务需要众多的协议协同工作，这些协议分布在参考模型的不同层中的，因此有时称它们为一个协议栈。 应用层(Application Layer)： 该层包括所有和应用程序协同工作，利用基础网络交换应用程序专用的数据的协议。 应用层是大多数普通与网络相关的程序为了通过网络与其他程序通信所使用的层。这个层的处理过程是应用特有的；数据从网络相关的程序以这种应用内部使用的格式进行传送，然后被编码成标准协议的格式。 常见的应用层协议有HTTP、FTP、DNS、SNMP(基于UDP) 传输层(Transport Layer)： 主要为两台主机上的应用程序提供端到端的通信，包括TCP协议（传输控制协议）和UDP（用户数据报协议）。端口号由此层提供，且在一台计算机中具有唯一性。 UDP为应用层提供一种非常简单的服务。它只是把称作数据报的分组从一台主机发送到另一台主机，但并不保证该数据报能到达另一端。任何必需的可靠性必须由应用层来提供。 TCP为两台主机提供高可靠性的数据通信。它所做的工作包括把应用程序交给它的数据分成合适的小块交给下面的网络层，确认接收到的分组，设置发送最后确认分组的超时时钟等,由于运输层提供了高可靠性的端到端的通信，因此应用层可以忽略所有这些细节。 因为TCP是一种面向连接的协议，所以两个在使用TCP的应用在彼此交换数据前必须先建立一个TCP连接，也就是有名的TCP三次握手，如下图所示： 建立连接协议过程：（TCP三次握手协议） 客户端发送一个SYN段指明客户打算连接的服务器的端口，以及初始序号（ISN）。 服务器发回包含服务器的初始序号的SYN报文段作为应答。同时，将确认序号设置为客户的ISN加1以对客户的SYN报文段进行确认。一个SYN占用一个序号。 客户将确认序号设置为服务器的ISN加1以对服务器的SYN报文段进行确认。 网络层(Internet Layer)： 处理分组在网络中的活动。网络层协议包括IP协议（网际协议），ICPM协议（Internet互联网控制报文协议），以及IGMP协议（Internet组管理协议），其中的IP协议身是TCP/IP协议簇中最为核心的协议。IP提供的是不可靠、无连接的数据包传送服务。 IP地址： 讲到IP协议就应该讲讲IP地址，IP地址是分配给网络上使用IP协议的设备的数字标签，有IPv4和IPv6两大类，我们目前使用的大部分还是IPv4的地址，以下简称IP地址，IP地址由32位二进制数组成，为便于使用，常以XXX.XXX.XXX.XXX形式表示。IP地址由两个字段组成：网络号(net-id)和主机号(host-id)，为方便IP地址管理，IP地址被分为五类，如下图： 其中A、B、C类地址为单播（unicast）地址；D类地址为组播（multicast）地址；E类地址为保留地址，以备将来的特殊用途。目前大量使用中的IP地址属于A、B、C三类地址。 A类地址范围：0.0.0.0～127.255.255.255 B类地址范围：128.0.0.0～191.255.255.255 C类地址范围：192.0.0.0～223.255.255.255 私网地址范围：10.0.0.0～10.255.255.255 ，172.16.0.0～172.31.255.255 ，192.168.0.0～192.168.255.255，私网地址只能在本地局域网中使用，不在公网中使用。 子网和掩码： 传统的IP地址分配方式，对IP地址的浪费非常严重。为了充分利用已有的IP地址，人们提出了掩码（mask）和子网（subnet）的概念。 掩码是一个与IP地址对应的32位数字，这些数字中一些为1，另外一些为0。原则上这些1和0可以任意组合，不过一般在设计掩码时，网络号码和子网号码的比特值为1，主机号码的比特值为0。掩码可以把IP地址分为两个部分：子网地址和主机地址。IP地址与掩码中为1的位对应的部分为子网地址，其他的位对应的部分则是主机地址。当不进行子网划分时，子网掩码即为默认值，此时子网掩码中“1”的长度就是网络号码的长度。即A类地址对应的掩码默认值为255.0.0.0；B类地址的掩码默认值为255.255.0.0；C类地址掩码的默认值为255.255.255.0。 IP路由选择： 概念：若目的主机与源主机在同一共享网络内，IP数据报直接送达目的主机，否则，主机把数据报发往默认的路由器上，由路由器进行数据报转发。 链路层(Link Layer)： 通常包括设备驱动程序和网络接口卡。处理与传输媒介的物理接口细节。主要协议有：ARP协议和RARP协议 MAC地址 ：数据链路层具有自己的寻址机制(48bit地址)，当一台主机把以太网数据帧发送到位于同一局域网上得另一台主机时，是根据48bit的以太网地址来确定目的接口的。 而ARP和RARP协议是为IP地址和MAC地址提供映射的： 使用： 我们在判断两台主机应用之间的网络是否正常，通常是判断到对方IP和端口是否能通。 常用网络判断命令： Windows： ping $IP：最常用的判断网络是否可达的命令。 tracert $IP：跟踪路由，即打印出本机到到目的IP，所经过路由。 telnet $IP $port：可以测试某个IP和应用端口是否能通。 netstat：查看本机监听和建立连接的端口。 Linux： ping $IP：最常用的判断网络是否可达的命令 traceroute $IP：跟踪路由，即打印出本机到到目的IP，所经过路由。 或者使用mtr -ni 0.1 $IP，可以实现以上两个共同的效果 nc -vz $IP $PORT：测试到目的IP的应用端口是否能通。 netstat -tupln：可以查看本机目前监听的端口 参考：https://en.wikipedia.org/wiki/Internet_protocol_suite 《TCP/IP详解卷1:协议》]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
</search>
