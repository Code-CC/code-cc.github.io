<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on CC&#39;s Trip</title>
    <link>https://cctrip.github.io/series/security/</link>
    <description>Recent content in Security on CC&#39;s Trip</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cctrip.github.io/series/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解SSL/TLS协议</title>
      <link>https://cctrip.github.io/posts/tls/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/posts/tls/</guid>
      <description>背景 早期我们在访问web时使用HTTP协议，该协议在传输数据时使用明文传输，明文传输带来了以下风险：
 信息窃听风险，第三方可以获取通信内容 信息篡改风险，第三方可以篡改通信内容 身份冒充风险，第三方可以冒充他人身份参与通信  为了解决明文传输所带来的风险，网景公司在1994年设计了SSL用于Web的安全传输协议，这是SSL的起源。IETF将SSL进行标准化，1999年公布了第一版TLS标准文件。随后又公布了 RFC 5246（2008年8月）与 RFC 6176 （2011年3月）。该协议在web中被广泛应用。
 SSL/TLS协议 TLS（Transport Layer Security，传输层安全协议），及其前身SSL（Secure Sockets Layer，安全套接层）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障。
TLS协议使用以下三种机制为信息通信提供安全传输：
 隐秘性，所有通信都通过加密后进行传播 身份认证，通过证书进行认证 可靠性，通过校验数据完整性维护一个可靠的安全连接   工作机制 TLS协议由两部分组成，包括（TLS Record Layer,TLS handshake protocol）
  Record Layer：
为每条信息提供一个header和在尾部生成一个从Message Authentication Code (MAC) 得到的hash值，其中header由5 bytes组成，分别是协议说明(1bytes),协议版本(2bytes)和长度(2bytes)，跟在header后面的协议信息长度不得超过16384bytes。　  Handshake Protocol：
开始一个安全连接需要客户端和服务端经过反复的建立握手。一个TLS握手需要经过如下几个步骤：
  首先还是要经过TCP三次握手建立连接，然后才是TLS握手的开始：
  ClientHello：Client端将自己的TLS协议版本，加密套件，压缩方法，随机数，SessionID(未填充)发送给Server端
  ServerHello：Server端将选择后的SSL协议版本，压缩算法，密码套件，填充SessionID，生成的随机数等信息发送给Client端
  ServerCertificates：Server端将自己的数字证书(包含公钥)，发送给Client端。(证书需要从数字证书认证机构(CA)申请，证书是对于服务端的一种认证)，若要进行更为安全的数据通信，Server端还可以向Client端发送Cerficate Request来要去客户端发送对方的证书进行合法性的认证。
  ServerHelloDone：当完成ServerHello后，Server端会发送Server Hello Done的消息给客户端，表示ServerHello 结束了。
  ClientKeyExchage：当Client端收到Server端的证书等信息后，会先对服务端的证书进行检查，检查证书的完整性以及证书跟服务端域名是否吻合，然后使用加密算法生成一个PreMaster Secret，并通过Server端的公钥进行加密，然后发送给Server端。</description>
    </item>
    
    <item>
      <title>WEB安全之CSP</title>
      <link>https://cctrip.github.io/posts/webcsp/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/posts/webcsp/</guid>
      <description>概念 内容安全策略(Content-Security-Policy，CSP)：是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS攻击和数据注入等，这些攻击可实现数据窃取、网站破坏和作为恶意软件分发版本等行为。该策略可让网站管理员指定客户端允许加载的各类可信任资源。
 浏览器支持 统计来源：caniuse.com/contentsecuritypolicy &amp;amp; Mozilla
 指令参考 Content-Security-Policy 响应头的值可配置一个或多个，多个指令以分号;隔开。
   指令 示例 描述     default-src &amp;lsquo;self&amp;rsquo; cdn.example.com 默认配置，若其他指令没有配置，都以此配置的规则为准   script-src &amp;lsquo;self&amp;rsquo; js.example.com 定义允许加载的JavaScript来源   style-src &amp;lsquo;self&amp;rsquo; css.example.com 定义允许加载的样式表来源   img-src &amp;lsquo;self&amp;rsquo; img.example.com 定义允许加载的图片来源   connect-src &amp;lsquo;self&amp;rsquo; 适用于XMLHttpRequest(AJAX),WebSocket或EventSource，当为不允许的来源，浏览器返回一个400的状态码。   font-src font.example.com 定义允许加载的字体来源   object-src &amp;lsquo;self&amp;rsquo; 定义允许加载的插件来源.eg,&amp;lt;object&amp;gt;,&amp;lt;embed&amp;gt;或&amp;lt;applet&amp;gt;   media-src media.example.com 定义允许加载的audio和video.eg,HTML5,&amp;lt;audio&amp;gt;,&amp;lt;video&amp;gt;元素   frame-src &amp;lsquo;self&amp;rsquo; 定义允许加载的框架来源   sandbox allow-forms allow-scripts 授权一个沙箱用来请求具有iframe sanbox等类似属性的资源,该沙箱默认为同源策略,禁止弹出窗口,执行插件和脚本.</description>
    </item>
    
  </channel>
</rss>