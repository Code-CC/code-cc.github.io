<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WEB on CC&#39;s Trip</title>
    <link>https://cctrip.github.io/series/web/</link>
    <description>Recent content in WEB on CC&#39;s Trip</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 29 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cctrip.github.io/series/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>谈谈HTTP</title>
      <link>https://cctrip.github.io/posts/http/</link>
      <pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/posts/http/</guid>
      <description>写在前面 如今网络已经无处不在，人们通过网络获取浏览各种信息，其中，大部分都是通过浏览器访问各种网页来获取我们想要的信息，那么浏览器与网页(服务端)究竟是如何通信的呢？这就得从HTTP协议说起了，浏览器获取网页信息都是基于HTTP协议来处理的。
 概念 HTTP（HyperText Transfer Protocol，超文本传输协议）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。其具有如下特点：
  支持客户/服务器模式。
  简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。
  灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。
  无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。
  无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快
  PS：尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。
 工作流程 HTTP协议的通信过程永远是客户端发起请求(request)，服务器回送响应(respone)，如下图所示：
一个完整的HTTP操作称为一个事务，其流程可分为四步：
  建立连接(TCP三次握手)
  客户端发送一个请求报文给服务器
  服务器响应对应信息
  客户端接收信息，然后断开连接
   请求和响应详解 请求报文   请求行：由请求方法、URL和HTTP版本组成
eg：GET /index.html HTTP/1.1
  请求方法
  GET：请求获取URI所标识的资源
  HEAD：请求获取URI所标识的资源，但不传回资源的文本部分
  POST：向指定URI资源提交数据，请求服务器进行处理
  PUT：向指定URI资源上传其最新内容
  DELETE：请求服务器删除URI所标识的资源</description>
    </item>
    
    <item>
      <title>WEB安全之CSP</title>
      <link>https://cctrip.github.io/posts/webcsp/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/posts/webcsp/</guid>
      <description>概念 内容安全策略(Content-Security-Policy，CSP)：是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS攻击和数据注入等，这些攻击可实现数据窃取、网站破坏和作为恶意软件分发版本等行为。该策略可让网站管理员指定客户端允许加载的各类可信任资源。
 浏览器支持 统计来源：caniuse.com/contentsecuritypolicy &amp;amp; Mozilla
 指令参考 Content-Security-Policy 响应头的值可配置一个或多个，多个指令以分号;隔开。
   指令 示例 描述     default-src &amp;lsquo;self&amp;rsquo; cdn.example.com 默认配置，若其他指令没有配置，都以此配置的规则为准   script-src &amp;lsquo;self&amp;rsquo; js.example.com 定义允许加载的JavaScript来源   style-src &amp;lsquo;self&amp;rsquo; css.example.com 定义允许加载的样式表来源   img-src &amp;lsquo;self&amp;rsquo; img.example.com 定义允许加载的图片来源   connect-src &amp;lsquo;self&amp;rsquo; 适用于XMLHttpRequest(AJAX),WebSocket或EventSource，当为不允许的来源，浏览器返回一个400的状态码。   font-src font.example.com 定义允许加载的字体来源   object-src &amp;lsquo;self&amp;rsquo; 定义允许加载的插件来源.eg,&amp;lt;object&amp;gt;,&amp;lt;embed&amp;gt;或&amp;lt;applet&amp;gt;   media-src media.example.com 定义允许加载的audio和video.eg,HTML5,&amp;lt;audio&amp;gt;,&amp;lt;video&amp;gt;元素   frame-src &amp;lsquo;self&amp;rsquo; 定义允许加载的框架来源   sandbox allow-forms allow-scripts 授权一个沙箱用来请求具有iframe sanbox等类似属性的资源,该沙箱默认为同源策略,禁止弹出窗口,执行插件和脚本.</description>
    </item>
    
  </channel>
</rss>