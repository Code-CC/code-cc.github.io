<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code.CC</title>
  <subtitle>—— 乘兴所至，心无旁及。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://code-cc.github.io/"/>
  <updated>2016-05-31T15:38:19.710Z</updated>
  <id>http://code-cc.github.io/</id>
  
  <author>
    <name>Code.CC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈HTTP</title>
    <link href="http://code-cc.github.io/2016/05/29/http/"/>
    <id>http://code-cc.github.io/2016/05/29/http/</id>
    <published>2016-05-29T07:07:03.000Z</published>
    <updated>2016-05-31T15:38:19.710Z</updated>
    
    <content type="html">&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;如今网络已经无处不在，人们通过网络获取浏览各种信息，其中，大部分都是通过浏览器访问各种网页来获取我们想要的信息，那么浏览器与网页(服务端)究竟是如何通信的呢？这就得从HTTP协议说起了，浏览器获取网页信息都是基于HTTP协议来处理的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;HTTP（HyperText Transfer Protocol，超文本传输协议）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。其具有如下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支持客户/服务器模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;工作流程&quot;&gt;&lt;a href=&quot;#工作流程&quot; class=&quot;headerlink&quot; title=&quot;工作流程&quot;&gt;&lt;/a&gt;工作流程&lt;/h3&gt;&lt;p&gt;HTTP协议的通信过程永远是客户端发起请求(request)，服务器回送响应(respone)，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/5657919_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个完整的HTTP操作称为一个事务，其流程可分为四步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;建立连接(TCP三次握手)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端发送一个请求报文给服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器响应对应信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端接收信息，然后断开连接&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;请求和响应详解&quot;&gt;&lt;a href=&quot;#请求和响应详解&quot; class=&quot;headerlink&quot; title=&quot;请求和响应详解&quot;&gt;&lt;/a&gt;请求和响应详解&lt;/h3&gt;&lt;h4 id=&quot;请求报文&quot;&gt;&lt;a href=&quot;#请求报文&quot; class=&quot;headerlink&quot; title=&quot;请求报文&quot;&gt;&lt;/a&gt;请求报文&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;请求行：由请求方法、URL和HTTP版本组成&lt;/p&gt;
&lt;p&gt;  eg：GET /index.html HTTP/1.1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;请求方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GET：请求获取URI所标识的资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HEAD：请求获取URI所标识的资源，但不传回资源的文本部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POST：向指定URI资源提交数据，请求服务器进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PUT：向指定URI资源上传其最新内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DELETE：请求服务器删除URI所标识的资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TRACE：回显服务器收到的请求，主要用于测试或诊断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OPTIONS：请求URI资源所支持的HTTP请求方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URL&lt;/p&gt;
&lt;p&gt;  请求的资源路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;协议版本&lt;/p&gt;
&lt;p&gt;  现在大部分为HTTP/1.0 和 HTTP/1.1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;请求头部&lt;/p&gt;
&lt;p&gt;  eg：host:www.google.com&lt;/p&gt;
&lt;p&gt;  host为必选，其他都为可选参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息体&lt;/p&gt;
&lt;p&gt;  请求所带的文本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;响应报文&quot;&gt;&lt;a href=&quot;#响应报文&quot; class=&quot;headerlink&quot; title=&quot;响应报文&quot;&gt;&lt;/a&gt;响应报文&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;状态行：由协议版本、状态码和描述信息组成&lt;/p&gt;
&lt;p&gt;  eg：HTTP/1.1 200 OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;协议版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态码：用于告诉客户端，服务器是否产生预期的响应&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1XX：提示信息，表示请求已被成功接收，继续处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2XX：成功，表示请求已被成功接收，理解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3XX：重定向，要完成请求必须进行更进一步的处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4XX：客户端错误，请求有语法错误或请求无法实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5XX：服务器端错误，服务器未能实现合法的请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;描述信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;响应头部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息体&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;一个例子&quot;&gt;&lt;a href=&quot;#一个例子&quot; class=&quot;headerlink&quot; title=&quot;一个例子&quot;&gt;&lt;/a&gt;一个例子&lt;/h4&gt;&lt;p&gt;访问codecc.xyz首页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Request，首行为请求行，其余为请求头部&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/20160531232545.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Respone，首行为响应状态行，空行前为响应头部，其余为响应数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/20160531232617.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;如今网络已经无处不在，人们通过网络获取浏览各种信息，其中，大部分都是通过浏览器访问各种网页来获取我们想要的信息，那么浏览器与
    
    </summary>
    
      <category term="technology" scheme="http://code-cc.github.io/categories/technology/"/>
    
    
      <category term="network" scheme="http://code-cc.github.io/tags/network/"/>
    
      <category term="web" scheme="http://code-cc.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>谈谈DNS</title>
    <link href="http://code-cc.github.io/2016/05/21/dns/"/>
    <id>http://code-cc.github.io/2016/05/21/dns/</id>
    <published>2016-05-21T12:53:01.000Z</published>
    <updated>2016-05-31T15:33:34.135Z</updated>
    
    <content type="html">&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;目前，我们大部分的网络通信都是基于TCP/IP协议的，而TCP/IP又基于IP地址作为唯一标识进行通信，随着需要记忆的IP地址数量的增多，肯定会超出我们的记忆能力范围，但如果使用一种利于人们的记忆的方式，如域名，例如”www.google.com”，我们便可以轻松的记忆这种方式的标识，而不是繁杂的数字。而DNS(域名系统)就是为了可以使用这种方式提供服务的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;DNS(Domain Name System)，域名系统，它是因特网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。&lt;/p&gt;
&lt;p&gt;DNS Domain Namespace，DNS域命名空间，是一种分层树状结构，其格式如下:”www.google.com”,以点”.”为分隔。结构如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160301212335189-776690379.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;根域：绝对域名(FQDN)，以点”.”结尾的域名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;顶级域：用来指示某个国家/地区或组织使用的名称的类型名称，例如.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二级域：个人或组织在因特网上使用的注册名称，例如google.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子域：已注册的二级域名派生的域名，一般就是网站名，例如www.google.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主机名：标识网络上的特定计算机，例如h1.www.google.com&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNS资源记录：(即映射关系，通常由域名管理员进行配置)，常见类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SOA：起始授权机构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NS：名称服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MX：邮件服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A：IP地址(最常用，映射IP地址)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CNAME：别名(较常用，映射到其他域名)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;　&lt;/p&gt;
&lt;h3 id=&quot;DNS工作原理&quot;&gt;&lt;a href=&quot;#DNS工作原理&quot; class=&quot;headerlink&quot; title=&quot;DNS工作原理&quot;&gt;&lt;/a&gt;DNS工作原理&lt;/h3&gt;&lt;p&gt;当我们请求一个域名时，会通过DNS服务器将域名解析成IP访问最终的主机，那么，DNS是如何查询到域名所对应的IP并返回给我们的呢？请工作机制如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160301205942986-1456220290.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当我们请求一个域名时，直到获取到IP地址，整个过程是如何工作的？以请求www.codecc.xyz为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先，我们的主机会去查找本地的hosts文件和本地DNS解析器缓存，如果hosts文件和本地DNS缓存存在www.codecc.xyz和IP的映射关系，则完成域名解析，请求该IP地址，否则进入第二步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当hosts和本地DNS解析器缓存都没有对应的网址映射关系，则会根据机器(/etc/reslove.conf)配置的本地DNS服务器进行查询，此服务器收到查询时，如果要查询的域名在本地配置区域资源或者缓存中存在映射关系，则跳到步骤9，将解析结果直接返回给客户机。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS：一二步骤为递归查询，其余步骤为迭代查询&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;若本地DNS服务器不存在该域名的映射关系，就把请求发送至13台根DNS服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根DNS服务器会判断这个域名(.xyz)由谁来授权管理，并返回一个负责该顶级域的DNS服务器的一个IP给本地DNS服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地DNS服务器收到该IP后，会再将查询请求发送至(.xyz)所在的DNS服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果(.xyz)的DNS服务器无法解析该域名，就会去判断这个二级域名(codecc.xyz)的管理者，返回一个负责该二级域的DNS服务器的IP给本地DNS服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地DNS服务器收到该IP后，会再次将查询请求发送至(codecc.xyz)所在的DNS服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(codecc.xyz)的DNS服务器会存有www.codecc.xzy的映射关系，将解析后的IP返回给本地DNS服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地DNS服务器根据查询到的解析IP发送给客户机，至此，DNS解析完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;常用DNS查询命令&quot;&gt;&lt;a href=&quot;#常用DNS查询命令&quot; class=&quot;headerlink&quot; title=&quot;常用DNS查询命令&quot;&gt;&lt;/a&gt;常用DNS查询命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;windows：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nslookup 域名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160420012038241-52598954.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nslookup 域名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160420012104335-886114220.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dig 域名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160420012127523-1968920086.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Domain_Name_System&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://technet.microsoft.com/en-us/library/cc772774(v=ws.10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://technet.microsoft.com/en-us/library/cc772774(v=ws.10).aspx&lt;/a&gt;.aspx)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;《TCP/IP详解卷1：协议》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;目前，我们大部分的网络通信都是基于TCP/IP协议的，而TCP/IP又基于IP地址作为唯一标识进行通信，随着需要记忆的IP地
    
    </summary>
    
      <category term="technology" scheme="http://code-cc.github.io/categories/technology/"/>
    
    
      <category term="network" scheme="http://code-cc.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>理解系统启动过程</title>
    <link href="http://code-cc.github.io/2016/05/21/systemstart/"/>
    <id>http://code-cc.github.io/2016/05/21/systemstart/</id>
    <published>2016-05-21T11:02:01.000Z</published>
    <updated>2016-05-21T12:40:08.507Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Linux是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为Linux操作系统。Linux是自由软件和开放源代码软件发展中最著名的例子。&lt;/p&gt;
&lt;p&gt;接触Linux的时间也不算短了，一直都是直接使用Linux操作系统进行一些工作，很少去了解系统从开机到能使用的整个过程，感觉有需要好好理解下整个系统的启动过程，故写这篇博客加深一下理解。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;启动过程&quot;&gt;&lt;a href=&quot;#启动过程&quot; class=&quot;headerlink&quot; title=&quot;启动过程&quot;&gt;&lt;/a&gt;启动过程&lt;/h3&gt;&lt;p&gt;先通过一张图来简单了解下整个系统启动的流程，整个过程基本可以分为&lt;font color=&quot;blue&quot;&gt;POST–&amp;gt;BIOS–&amp;gt;MBR(GRUB)–&amp;gt;Kernel–&amp;gt;Init–&amp;gt;Runlevel&lt;/font&gt;。下面会详细说明每个过程的作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20151229231206354-919070678.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BIOS&lt;/p&gt;
&lt;p&gt;  BIOS(Basic Input/Output System)，基本输入输出系统，该系统存储于主板的ROM芯片上，计算机在开机时，会最先读取该系统，然后会有一个加电自检过程，这个过程其实就是检查CPU和内存，计算机最基本的组成单元(控制器、运算器和存储器)，还会检查其他硬件，若没有异常就开始加载BIOS程序到内存当中。详细的BIOS功能，这边就不说了，BIOS主要的一个功能就是存储了磁盘的启动顺序，BIOS会按照启动顺序去查找第一个磁盘头的MBR信息，并加载和执行MBR中的Bootloader程序，若第一个磁盘不存在MBR，则会继续查找第二个磁盘(PS：启动顺序可以在BIOS的界面中进行设置)，一旦BootLoader程序被检测并加载内存中，BIOS就将控制权交接给了BootLoader程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MBR&lt;/p&gt;
&lt;p&gt;  MBR(Master Boot Record)，主引导记录，MBR存储于磁盘的头部，大小为512bytes，其中，446bytes用于存储BootLoader程序，64bytes用于存储分区表信息，最后2bytes用于MBR的有效性检查。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GRUB&lt;/p&gt;
&lt;p&gt;  GRUB(Grand Unified Bootloader)，多系统启动程序，其执行过程可分为三个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stage1：这个其实就是MBR，它的主要工作就是查找并加载第二段Bootloader程序(stage2)，但系统在没启动时，MBR根本找不到文件系统，也就找不到stage2所存放的位置，因此，就有了stage1_5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stage1_5：该步骤就是为了识别文件系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stage2：GRUB程序会根据/boot/grub/grub.conf文件查找Kernel的信息，然后开始加载Kernel程序，当Kernel程序被检测并在加载到内存中，GRUB就将控制权交接给了Kernel程序。&lt;/p&gt;
&lt;p&gt;  PS：实际上这个步骤/boot还没被挂载，GRUB直接识别grub所在磁盘的文件系统，所以实际上应该是/grub/grub.conf文件，该配置文件的信息如下：&lt;/p&gt;
&lt;p&gt;  grub.conf:&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#boot=/dev/sda&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;default=0&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;#设定默认启动的title的编号，从0开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;timeout=5&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;#等待用户选择的超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;splashimage=(hd0,0)/boot/grub/splash.xpm.gz&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#GRUB的背景图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hiddenmenu   &lt;span class=&quot;comment&quot;&gt;#隐藏菜单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title CentOS (&lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;194&lt;/span&gt;.el5PAE)    &lt;span class=&quot;comment&quot;&gt;#内核标题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	root (hd0,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)       &lt;span class=&quot;comment&quot;&gt;#内核文件所在的设备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	kernel /vmlinuz-&lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;194&lt;/span&gt;.el5PAE ro &lt;span class=&quot;attr&quot;&gt;root=LABEL=/&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#内核文件路径以及传递给内核的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	initrd /initrd-&lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;194&lt;/span&gt;.el5PAE.img                &lt;span class=&quot;comment&quot;&gt;#ramdisk文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kernel&lt;/p&gt;
&lt;p&gt;  Kernel，内核，Kernel是Linux系统最主要的程序，实际上，Kernel的文件很小，只保留了最基本的模块，并以压缩的文件形式存储在硬盘中，当GRUB将Kernel读进内存，内存开始解压缩内核文件。讲内核启动，应该先讲下initrd这个文件，&lt;/p&gt;
&lt;p&gt;  initrd(Initial RAM Disk)，它在stage2这个步骤就被拷贝到了内存中，这个文件是在安装系统时产生的，是一个临时的根文件系统(rootfs)。因为Kernel为了精简，只保留了最基本的模块，因此，Kernel上并没有各种硬件的驱动程序，也就无法识rootfs所在的设备，故产生了initrd这个文件，该文件装载了必要的驱动模块，当Kernel启动时，可以从initrd文件中装载驱动模块，直到挂载真正的rootfs，然后将initrd从内存中移除。&lt;/p&gt;
&lt;p&gt;  Kernel会以只读方式挂载根文件系统，当根文件系统被挂载后，开始装载第一个进程(用户空间的进程)，执行/sbin/init，之后就将控制权交接给了init程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Init&lt;/p&gt;
&lt;p&gt;  init，初始化，顾名思义，该程序就是进行OS初始化操作，实际上是根据/etc/inittab(定义了系统默认运行级别)设定的动作进行脚本的执行，第一个被执行的脚本为/etc/rc.d/rc.sysinit，这个是真正的OS初始化脚本，简单讲下这个脚本的任务(可以去看看实际脚本，看看都做了什么)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;激活udev和selinux;&lt;/li&gt;
&lt;li&gt;根据/etc/sysctl.conf文件，来设定内核参数;&lt;/li&gt;
&lt;li&gt;设定系统时钟;&lt;/li&gt;
&lt;li&gt;装载硬盘映射;&lt;/li&gt;
&lt;li&gt;启用交换分区;&lt;/li&gt;
&lt;li&gt;设置主机名;&lt;/li&gt;
&lt;li&gt;根文件系统检测，并以读写方式重新挂载根文件系统;&lt;/li&gt;
&lt;li&gt;激活RAID和LVM设备;&lt;/li&gt;
&lt;li&gt;启用磁盘配额;&lt;/li&gt;
&lt;li&gt;根据/etc/fstab，检查并挂载其他文件系统;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;清理过期的锁和PID文件&lt;/p&gt;
&lt;p&gt;执行完后，根据配置的启动级别，执行对应目录底下的脚本，最后执行/etc/rc.d/rc.local这个脚本，至此，系统启动完成。
　　&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Runlevel&lt;/p&gt;
&lt;p&gt;  runlevel，运行级别，不同的级别会启动的服务不一样，init会根据定义的级别去执行相应目录下的脚本，Linux的启动级别分为以下几种：&lt;/p&gt;
&lt;p&gt;  0：关机模式&lt;/p&gt;
&lt;p&gt;  1：单一用户模式(直接以管理员身份进入)&lt;/p&gt;
&lt;p&gt;  2：多用户模式（无网络）&lt;/p&gt;
&lt;p&gt;  3：多用户模式（命令行）&lt;/p&gt;
&lt;p&gt;  4：保留&lt;/p&gt;
&lt;p&gt;  5：多用户模式（图形界面）&lt;/p&gt;
&lt;p&gt;  6：重启&lt;/p&gt;
&lt;p&gt;  在不同的运行级别下，/etc/rc.d/rc这个脚本会分别执行不同目录下的脚本：&lt;/p&gt;
&lt;p&gt;  Runlevel 0 – /etc/rc.d/rc0.d/&lt;/p&gt;
&lt;p&gt;  Runlevel 1 – /etc/rc.d/rc1.d/&lt;/p&gt;
&lt;p&gt;  Runlevel 2 – /etc/rc.d/rc2.d/&lt;/p&gt;
&lt;p&gt;  Runlevel 3 – /etc/rc.d/rc3.d/&lt;/p&gt;
&lt;p&gt;  Runlevel 4 – /etc/rc.d/rc4.d/&lt;/p&gt;
&lt;p&gt;  Runlevel 5 – /etc/rc.d/rc5.d/&lt;/p&gt;
&lt;p&gt;  Runlevel 6 – /etc/rc.d/rc6.d/&lt;/p&gt;
&lt;p&gt;  这些目录下的脚本只有K*和S*开头的文件，K开头的文件为开机需要执行关闭的服务，S开头的文件为开机需要执行开启的服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.thegeekstuff.com/2011/02/linux-boot-process/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.thegeekstuff.com/2011/02/linux-boot-process/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/l-linuxboot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ibm.com/developerworks/library/l-linuxboot/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Linux是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程
    
    </summary>
    
      <category term="technology" scheme="http://code-cc.github.io/categories/technology/"/>
    
    
      <category term="system" scheme="http://code-cc.github.io/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>WEB安全之CSP</title>
    <link href="http://code-cc.github.io/2016/05/20/webcsp/"/>
    <id>http://code-cc.github.io/2016/05/20/webcsp/</id>
    <published>2016-05-20T15:11:11.000Z</published>
    <updated>2016-05-20T16:35:42.056Z</updated>
    
    <content type="html">&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;内容安全策略(Content-Security-Policy，CSP)：是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS攻击和数据注入等，这些攻击可实现数据窃取、网站破坏和作为恶意软件分发版本等行为。该策略可让网站管理员指定客户端允许加载的各类可信任资源。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;浏览器支持&quot;&gt;&lt;a href=&quot;#浏览器支持&quot; class=&quot;headerlink&quot; title=&quot;浏览器支持&quot;&gt;&lt;/a&gt;浏览器支持&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;image/607348-20151208141131543-187859986.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;统计来源：&lt;a href=&quot;http://caniuse.com/#feat=contentsecuritypolicy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;caniuse.com/contentsecuritypolicy&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://hacks.mozilla.org/2013/05/content-security-policy-1-0-lands-in-firefox-aurora/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mozilla&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;指令参考&quot;&gt;&lt;a href=&quot;#指令参考&quot; class=&quot;headerlink&quot; title=&quot;指令参考&quot;&gt;&lt;/a&gt;指令参考&lt;/h3&gt;&lt;p&gt;Content-Security-Policy 响应头的值可配置一个或多个，多个指令以分号;隔开。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;描述    &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; default-src&lt;/td&gt;
&lt;td&gt;‘self’ cdn.example.com&lt;/td&gt;
&lt;td&gt;默认配置，若其他指令没有配置，都以此配置的规则为准&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; script-src&lt;/td&gt;
&lt;td&gt;‘self’ js.example.com&lt;/td&gt;
&lt;td&gt;定义允许加载的JavaScript来源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; style-src&lt;/td&gt;
&lt;td&gt;‘self’ css.example.com&lt;/td&gt;
&lt;td&gt;定义允许加载的样式表来源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; img-src&lt;/td&gt;
&lt;td&gt;‘self’ img.example.com&lt;/td&gt;
&lt;td&gt;定义允许加载的图片来源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; connect-src&lt;/td&gt;
&lt;td&gt;‘self’&lt;/td&gt;
&lt;td&gt;适用于XMLHttpRequest(AJAX),WebSocket或EventSource，当为不允许的来源，浏览器返回一个400的状态码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; font-src&lt;/td&gt;
&lt;td&gt;font.example.com&lt;/td&gt;
&lt;td&gt;定义允许加载的字体来源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; object-src&lt;/td&gt;
&lt;td&gt;‘self’&lt;/td&gt;
&lt;td&gt;定义允许加载的插件来源.eg,&lt;object\&gt;,&lt;embed\&gt;或&lt;applet\&gt;&lt;/applet\&gt;&lt;/embed\&gt;&lt;/object\&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; media-src&lt;/td&gt;
&lt;td&gt;media.example.com&lt;/td&gt;
&lt;td&gt;定义允许加载的audio和video.eg,HTML5,&lt;audio\&gt;,&lt;video\&gt;元素&lt;/video\&gt;&lt;/audio\&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; frame-src&lt;/td&gt;
&lt;td&gt;‘self’&lt;/td&gt;
&lt;td&gt;定义允许加载的框架来源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; sandbox&lt;/td&gt;
&lt;td&gt;allow-forms allow-scripts&lt;/td&gt;
&lt;td&gt;授权一个沙箱用来请求具有iframe sanbox等类似属性的资源,该沙箱默认为同源策略,禁止弹出窗口,执行插件和脚本.若要允许其他,可增加配置:allow-forms,allow-same-origin,allow-scripts,allow-top-navigation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; report-uri&lt;/td&gt;
&lt;td&gt;/some-report-uri&lt;/td&gt;
&lt;td&gt;该配置让浏览器发送一个失败报告到指定的路径，也可以增加-Report-only到HTTP头,让浏览器只发送报告(不做阻止动作)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&quot;来源配置参考&quot;&gt;&lt;a href=&quot;#来源配置参考&quot; class=&quot;headerlink&quot; title=&quot;来源配置参考&quot;&gt;&lt;/a&gt;来源配置参考&lt;/h3&gt;&lt;p&gt;所有的指令都要在配置后面添加来源列表，多个来源列表可用空格隔开，*和none只能存在一个。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;描述    &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; *&lt;/td&gt;
&lt;td&gt;img-src *&lt;/td&gt;
&lt;td&gt;无限制，允许所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ‘none’&lt;/td&gt;
&lt;td&gt;object-src ‘none’&lt;/td&gt;
&lt;td&gt;禁止加载任何路径的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ‘self’&lt;/td&gt;
&lt;td&gt;script-src ‘self’&lt;/td&gt;
&lt;td&gt;允许加载同源的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; data:&lt;/td&gt;
&lt;td&gt;img-src ‘self’ data:&lt;/td&gt;
&lt;td&gt;允许通过数据模式加载资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; domain.ccc.com&lt;/td&gt;
&lt;td&gt;img-src img.ccc.com&lt;/td&gt;
&lt;td&gt;允许加载匹配域名的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; *.ccc.com&lt;/td&gt;
&lt;td&gt;img-src *.ccc.com&lt;/td&gt;
&lt;td&gt;允许加载匹配域名的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://img.ccc.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://img.ccc.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;img-src &lt;a href=&quot;https://img.ccc.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://img.ccc.com&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;允许加载匹配https方式的域名资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; https:&lt;/td&gt;
&lt;td&gt;img-src https:&lt;/td&gt;
&lt;td&gt;允许加载所有匹配https方式的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ‘unsafe-inline’&lt;/td&gt;
&lt;td&gt;script-src ‘unsafe-inline’&lt;/td&gt;
&lt;td&gt;允许使用内联元素,类似,Style attribute,onclick,scripttag bodies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ‘unsafe-eval’&lt;/td&gt;
&lt;td&gt;script-src ‘unsafe-eval’&lt;/td&gt;
&lt;td&gt;允许不安全的动态编码，例如eval()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只允许加载同源的所有资源&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;default-src &amp;#39;self&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持*号匹配&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;default-src &amp;#39;self&amp;#39; https://*.ccc.com:*;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只允许加载同源的脚本&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;script-src &amp;#39;self&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只允许加载同源的和www.ccc.com的脚本&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;script-src &amp;#39;self&amp;#39; www.ccc.com;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;常见配置&quot;&gt;&lt;a href=&quot;#常见配置&quot; class=&quot;headerlink&quot; title=&quot;常见配置&quot;&gt;&lt;/a&gt;常见配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;该策略允许加载同源的图片、脚本、AJAX和CSS资源，并阻止加载其他任何资源，对于大多数网站是一个不错的配置。&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;default-src &amp;#39;none&amp;#39;; script-src &amp;#39;self&amp;#39;; connect-src &amp;#39;self&amp;#39;; img-src &amp;#39;self&amp;#39;; style-src &amp;#39;self&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;被禁止时的报错信息：&lt;/p&gt;
&lt;p&gt;  谷歌浏览器可通过谷歌开发工具查看该报错，通常是按F12&lt;/p&gt;
  &lt;font color=&quot;red&quot;&gt;Refused to load the script ‘script-uri’ because it violates the following Content Security Policy directive: “your CSP directive”.&lt;/font&gt;

&lt;p&gt;  Firefox 可通过 Web Developer Tools 查看报错&lt;/p&gt;
  &lt;font color=&quot;red&quot;&gt;Content Security Policy: A violation occurred for a report-only CSP policy (“An attempt to execute inline scripts has been blocked”). The behavior was allowed, and a CSP report was sent.&lt;/font&gt;




&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://content-security-policy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://content-security-policy.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/CSP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/Security/CSP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/CSP2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3.org/TR/CSP2/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;内容安全策略(Content-Security-Policy，CSP)：是一种web应用技术用于帮助缓解大部分类型的内容注入攻击，包括XSS
    
    </summary>
    
      <category term="technology" scheme="http://code-cc.github.io/categories/technology/"/>
    
    
      <category term="web" scheme="http://code-cc.github.io/tags/web/"/>
    
      <category term="security" scheme="http://code-cc.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>理解SSL/TLS协议</title>
    <link href="http://code-cc.github.io/2016/05/19/tls/"/>
    <id>http://code-cc.github.io/2016/05/19/tls/</id>
    <published>2016-05-18T16:43:26.000Z</published>
    <updated>2016-05-21T10:58:44.231Z</updated>
    
    <content type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;早期我们在访问web时使用HTTP协议，该协议在传输数据时使用明文传输，明文传输带来了以下风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息窃听风险，第三方可以获取通信内容&lt;/li&gt;
&lt;li&gt;信息篡改风险，第三方可以篡改通信内容&lt;/li&gt;
&lt;li&gt;身份冒充风险，第三方可以冒充他人身份参与通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决明文传输所带来的风险，网景公司在1994年设计了SSL用于Web的安全传输协议，这是SSL的起源。IETF将SSL进行标准化，1999年公布了第一版TLS标准文件。随后又公布了 RFC 5246（2008年8月）与 RFC 6176 （2011年3月）。该协议在web中被广泛应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;SSL-TLS协议&quot;&gt;&lt;a href=&quot;#SSL-TLS协议&quot; class=&quot;headerlink&quot; title=&quot;SSL/TLS协议&quot;&gt;&lt;/a&gt;SSL/TLS协议&lt;/h3&gt;&lt;p&gt;TLS（Transport Layer Security，传输层安全协议），及其前身SSL（Secure Sockets Layer，安全套接层）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障。&lt;/p&gt;
&lt;p&gt;TLS协议使用以下三种机制为信息通信提供安全传输：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐秘性，所有通信都通过加密后进行传播&lt;/li&gt;
&lt;li&gt;身份认证，通过证书进行认证&lt;/li&gt;
&lt;li&gt;可靠性，通过校验数据完整性维护一个可靠的安全连接&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;工作机制&quot;&gt;&lt;a href=&quot;#工作机制&quot; class=&quot;headerlink&quot; title=&quot;工作机制&quot;&gt;&lt;/a&gt;工作机制&lt;/h3&gt;&lt;p&gt;TLS协议由两部分组成，包括（TLS Record Layer,TLS handshake protocol）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Record Layer：&lt;/p&gt;
&lt;p&gt;  为每条信息提供一个header和在尾部生成一个从Message Authentication Code (MAC) 得到的hash值，其中header由5 bytes组成，分别是协议说明(1bytes),协议版本(2bytes)和长度(2bytes)，跟在header后面的协议信息长度不得超过16384bytes。　&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handshake Protocol：&lt;/p&gt;
&lt;p&gt;  开始一个安全连接需要客户端和服务端经过反复的建立握手。一个TLS握手需要经过如下几个步骤：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;image/607348-20160224221716880-1764174375.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先还是要经过TCP三次握手建立连接，然后才是TLS握手的开始：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ClientHello：Client端将自己的TLS协议版本，加密套件，压缩方法，随机数，SessionID(未填充)发送给Server端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ServerHello：Server端将选择后的SSL协议版本，压缩算法，密码套件，填充SessionID，生成的随机数等信息发送给Client端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ServerCertificates：Server端将自己的数字证书(包含公钥)，发送给Client端。(证书需要从数字证书认证机构(CA)申请，证书是对于服务端的一种认证)，若要进行更为安全的数据通信，Server端还可以向Client端发送Cerficate Request来要去客户端发送对方的证书进行合法性的认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ServerHelloDone：当完成ServerHello后，Server端会发送Server Hello Done的消息给客户端，表示ServerHello 结束了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ClientKeyExchage：当Client端收到Server端的证书等信息后，会先对服务端的证书进行检查，检查证书的完整性以及证书跟服务端域名是否吻合，然后使用加密算法生成一个PreMaster Secret，并通过Server端的公钥进行加密，然后发送给Server端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ClientFinishd：Client端会发送一个ChangeCipherSpec(一种协议，数据只有一字节)，用于告知Server端已经切换到之前协商好的加密套件的状态，准备使用之前协商好的加密套件加密数据并进行传输了。然后使用Master Secret(通过两个随机数、PreMaster Secret和加密算法计算得出)加密一段Finish的数据传送给服务端，此数据是为了在正式传输应用数据之前对刚刚握手建立起来的加解密通道进行验证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server Finishd：Sever端在接收到Client端传过来的加密数据后，使用私钥对这段加密数据进行解密，并对数据进行验证，然后会给客户端发送一个ChangeCipherSpec，告知客户端已经切换到协商过的加密套件状态，准备使用加密套件加密数据并传输了。之后，服务端也会使用Master Secret加密一段Finish消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据之前的握手信息，如果客户端和服务端都能对Finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功。&lt;/p&gt;
&lt;p&gt;接下来，双方所有的通信数据都通过Master Secret进行加密后传输。　　　　&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Transport_Layer_Security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sans.org/reading-room/whitepapers/protocols/ssl-tls-beginners-guide-1029&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.sans.org/reading-room/whitepapers/protocols/ssl-tls-beginners-guide-1029&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/kb/257591&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://support.microsoft.com/en-us/kb/257591&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;早期我们在访问web时使用HTTP协议，该协议在传输数据时使用明文传输，明文传输带来了以下风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息窃听风险，第
    
    </summary>
    
      <category term="technology" scheme="http://code-cc.github.io/categories/technology/"/>
    
    
      <category term="security" scheme="http://code-cc.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>简单理解计算机通信</title>
    <link href="http://code-cc.github.io/2016/05/18/networkcomm/"/>
    <id>http://code-cc.github.io/2016/05/18/networkcomm/</id>
    <published>2016-05-17T16:36:31.000Z</published>
    <updated>2016-05-18T17:15:09.617Z</updated>
    
    <content type="html">&lt;h3 id=&quot;写在前面：&quot;&gt;&lt;a href=&quot;#写在前面：&quot; class=&quot;headerlink&quot; title=&quot;写在前面：&quot;&gt;&lt;/a&gt;写在前面：&lt;/h3&gt;&lt;p&gt;在计算机刚出现的时候，只能在本机进行一些运算处理，想将一台计算机中的数据转移到另一台计算机中，需要通过外部存储介质来传输，例如磁带、软盘。而网络技术的出现，使得计算机间可以通过一些传输介质(网线、光纤等)，实现快速的数据传输和信息交互。如今，网络已无处不在，那么，计算机之间究竟是如何通信的呢？下面会通过一些基础的网络知识来简单理解计算机之间的通信过程。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;网络通信模型：&quot;&gt;&lt;a href=&quot;#网络通信模型：&quot; class=&quot;headerlink&quot; title=&quot;网络通信模型：&quot;&gt;&lt;/a&gt;网络通信模型：&lt;/h3&gt;&lt;p&gt;网络通信模型是一种概念模型和框架，旨在使各种计算机在世界范围内互连为网络。其中有OSI七层模型和TCP/IP四层模型，现在大部分网络通信都是以TCP/IP四层模型为基础的。它们的对应层次如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312201154210-2019193861.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;OSI有七层：从上到下依次为应用层、表示层、会话层、传输层、网络层、数据链路层、物理层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TCP/IP有四层：从上到下依次为应用层、传输层、互连层(网络层)、网络接口层(链路层)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为目前大部分TCP/IP模型，所以就以TCP/IP为例，我们来理解下数据间的通信，下图是两台计算机通信的数据的传输过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312202413054-848303498.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;数据封装：&quot;&gt;&lt;a href=&quot;#数据封装：&quot; class=&quot;headerlink&quot; title=&quot;数据封装：&quot;&gt;&lt;/a&gt;数据封装：&lt;/h3&gt;&lt;p&gt;在详细了解TCP/IP每一层各自的作用前，先要理解数据封装的概念，数据在通过网络接口传送出去前，会经过层层封装，每层都会在前面的基础上添加自己的信息，在传输到对方计算机后，又会被层层进行解封装后得到最后的数据。其过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312203516679-1695630421.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;TCP-IP参考模型：&quot;&gt;&lt;a href=&quot;#TCP-IP参考模型：&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP参考模型：&quot;&gt;&lt;/a&gt;TCP/IP参考模型：&lt;/h3&gt;&lt;p&gt;TCP/IP参考模型是一个抽象的分层模型，这个模型中，所有的TCP/IP系列网络协议都被归类到4个抽象的”层”中。每一抽象层创建在低一层提供的服务上，并且为高一层提供服务。 完成一些特定的任务需要众多的协议协同工作，这些协议分布在参考模型的不同层中的，因此有时称它们为一个协议栈。&lt;/p&gt;
&lt;h5 id=&quot;应用层-Application-Layer-：&quot;&gt;&lt;a href=&quot;#应用层-Application-Layer-：&quot; class=&quot;headerlink&quot; title=&quot;应用层(Application Layer)：&quot;&gt;&lt;/a&gt;应用层(Application Layer)：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;该层包括所有和应用程序协同工作，利用基础网络交换应用程序专用的数据的协议。 应用层是大多数普通与网络相关的程序为了通过网络与其他程序通信所使用的层。这个层的处理过程是应用特有的；数据从网络相关的程序以这种应用内部使用的格式进行传送，然后被编码成标准协议的格式。&lt;/li&gt;
&lt;li&gt;常见的应用层协议有HTTP、FTP、DNS、SNMP(基于UDP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;传输层-Transport-Layer-：&quot;&gt;&lt;a href=&quot;#传输层-Transport-Layer-：&quot; class=&quot;headerlink&quot; title=&quot;传输层(Transport Layer)：&quot;&gt;&lt;/a&gt;传输层(Transport Layer)：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;主要为两台主机上的应用程序提供端到端的通信，包括TCP协议（传输控制协议）和UDP（用户数据报协议）。&lt;br&gt;端口号由此层提供，且在一台计算机中具有唯一性。&lt;/li&gt;
&lt;li&gt;UDP为应用层提供一种非常简单的服务。它只是把称作数据报的分组从一台主机发送到另一台主机，但并不保证该数据报能到达另一端。任何必需的可靠性必须由应用层来提供。&lt;/li&gt;
&lt;li&gt;TCP为两台主机提供高可靠性的数据通信。它所做的工作包括把应用程序交给它的数据分成合适的小块交给下面的网络层，确认接收到的分组，设置发送最后确认分组的超时时钟等,由于运输层提供了高可靠性的端到端的通信，因此应用层可以忽略所有这些细节。&lt;/li&gt;
&lt;li&gt;因为TCP是一种面向连接的协议，所以两个在使用TCP的应用在彼此交换数据前必须先建立一个TCP连接，也就是有名的TCP三次握手，如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312211241132-1517700594.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;建立连接协议过程：（TCP三次握手协议）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送一个SYN段指明客户打算连接的服务器的端口，以及初始序号（ISN）。&lt;/li&gt;
&lt;li&gt;服务器发回包含服务器的初始序号的SYN报文段作为应答。同时，将确认序号设置为客户的ISN加1以对客户的SYN报文段进行确认。一个SYN占用一个序号。&lt;/li&gt;
&lt;li&gt;客户将确认序号设置为服务器的ISN加1以对服务器的SYN报文段进行确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;网络层-Internet-Layer-：&quot;&gt;&lt;a href=&quot;#网络层-Internet-Layer-：&quot; class=&quot;headerlink&quot; title=&quot;网络层(Internet Layer)：&quot;&gt;&lt;/a&gt;网络层(Internet Layer)：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;处理分组在网络中的活动。网络层协议包括IP协议（网际协议），ICPM协议（Internet互联网控制报文协议），以及IGMP协议（Internet组管理协议），其中的IP协议身是TCP/IP协议簇中最为核心的协议。IP提供的是不可靠、无连接的数据包传送服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IP地址：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;讲到IP协议就应该讲讲IP地址，IP地址是分配给网络上使用IP协议的设备的数字标签，有IPv4和IPv6两大类，我们目前使用的大部分还是IPv4的地址，以下简称IP地址，IP地址由32位二进制数组成，为便于使用，常以XXX.XXX.XXX.XXX形式表示。IP地址由两个字段组成：网络号(net-id)和主机号(host-id)，为方便IP地址管理，IP地址被分为五类，如下图：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312213647569-286300397.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;其中A、B、C类地址为单播（unicast）地址；D类地址为组播（multicast）地址；E类地址为保留地址，以备将来的特殊用途。目前大量使用中的IP地址属于A、B、C三类地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;A类地址范围：0.0.0.0～127.255.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;B类地址范围：128.0.0.0～191.255.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;C类地址范围：192.0.0.0～223.255.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;私网地址范围：10.0.0.0～10.255.255.255 ，172.16.0.0～172.31.255.255 ，192.168.0.0～192.168.255.255，私网地址只能在本地局域网中使用，不在公网中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子网和掩码：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;传统的IP地址分配方式，对IP地址的浪费非常严重。为了充分利用已有的IP地址，人们提出了掩码（mask）和子网（subnet）的概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;掩码是一个与IP地址对应的32位数字，这些数字中一些为1，另外一些为0。原则上这些1和0可以任意组合，不过一般在设计掩码时，网络号码和子网号码的比特值为1，主机号码的比特值为0。掩码可以把IP地址分为两个部分：子网地址和主机地址。IP地址与掩码中为1的位对应的部分为子网地址，其他的位对应的部分则是主机地址。当不进行子网划分时，子网掩码即为默认值，此时子网掩码中“1”的长度就是网络号码的长度。即A类地址对应的掩码默认值为255.0.0.0；B类地址的掩码默认值为255.255.0.0；C类地址掩码的默认值为255.255.255.0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IP路由选择：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;概念：若目的主机与源主机在同一共享网络内，IP数据报直接送达目的主机，否则，主机把数据报发往默认的路由器上，由路由器进行数据报转发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;链路层-Link-Layer-：&quot;&gt;&lt;a href=&quot;#链路层-Link-Layer-：&quot; class=&quot;headerlink&quot; title=&quot;链路层(Link Layer)：&quot;&gt;&lt;/a&gt;链路层(Link Layer)：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;通常包括设备驱动程序和网络接口卡。处理与传输媒介的物理接口细节。主要协议有：ARP协议和RARP协议&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MAC地址 ：数据链路层具有自己的寻址机制(48bit地址)，当一台主机把以太网数据帧发送到位于同一局域网上得另一台主机时，是根据48bit的以太网地址来确定目的接口的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;而ARP和RARP协议是为IP地址和MAC地址提供映射的：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312214932366-1742109445.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;使用：&quot;&gt;&lt;a href=&quot;#使用：&quot; class=&quot;headerlink&quot; title=&quot;使用：&quot;&gt;&lt;/a&gt;使用：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们在判断两台主机应用之间的网络是否正常，通常是判断到对方IP和端口是否能通。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常用网络判断命令：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ping $IP：最常用的判断网络是否可达的命令。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312220145210-443719950.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tracert $IP：跟踪路由，即打印出本机到到目的IP，所经过路由。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312220158054-2124916124.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;telnet $IP $port：可以测试某个IP和应用端口是否能通。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netstat：查看本机监听和建立连接的端口。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312220227866-1298265423.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linux：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ping $IP：最常用的判断网络是否可达的命令&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;traceroute $IP：跟踪路由，即打印出本机到到目的IP，所经过路由。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;或者使用mtr -ni 0.1 $IP，可以实现以上两个共同的效果&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312221617569-1834112731.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nc -vz $IP $PORT：测试到目的IP的应用端口是否能通。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312221825819-331058027.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netstat -tupln：可以查看本机目前监听的端口&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;image/607348-20160312221946585-1872997601.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_protocol_suite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Internet_protocol_suite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;《TCP/IP详解卷1:协议》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面：&quot;&gt;&lt;a href=&quot;#写在前面：&quot; class=&quot;headerlink&quot; title=&quot;写在前面：&quot;&gt;&lt;/a&gt;写在前面：&lt;/h3&gt;&lt;p&gt;在计算机刚出现的时候，只能在本机进行一些运算处理，想将一台计算机中的数据转移到另一台计算机中，需要通过外部存储介质来
    
    </summary>
    
      <category term="technology" scheme="http://code-cc.github.io/categories/technology/"/>
    
    
      <category term="network" scheme="http://code-cc.github.io/tags/network/"/>
    
  </entry>
  
</feed>
